{"version":3,"sources":["ng://somemail73-test-services/lib/dependentService.service.ts","ng://somemail73-test-services/lib/serviceWithConfiguredParam.service.ts","ng://somemail73-test-services/lib/counter.ts","ng://somemail73-test-services/lib/services.module.ts","ng://somemail73-test-services/lib/store.service.ts"],"names":["DependentService","console","log","Injectable","ServiceWithConfiguredParam","configParam","dependentService","this","prototype","testConfiguration","testProperty","INCREMENT","DECREMENT","RESET","counterReducer","state","action","type","ServicesModule","forRoot","param","ngModule","providers","provide","useFactory","servicesTwoService","deps","forFeature","forTheHorde","NgModule","args","imports","StoreModule","count","exports","StoreService","store","counter","select","increment","dispatch","decrement","reset","providedIn","Store"],"mappings":"0UAAA,IAAAA,EAAA,WAKE,SAAAA,IACEC,QAAQC,IAAI,+CAHfC,EAAAA,qDAHD,GCAAC,EAAA,WAME,SAAAA,EAAoBC,EAAkBC,GAAlBC,KAAAF,YAAAA,oBAKL,EAJbJ,QAAQC,IAAIG,GACZJ,QAAQC,IAAII,UAKdF,EAAAI,UAAAC,kBAAA,WACER,QAAQC,IAAIK,KAAKG,cACjBH,KAAKG,cAAgB,EACrBT,QAAQC,IAAIK,KAAKF,kCAZpBF,EAAAA,uEAFOH,OAFR,GCEaW,EAAY,YACZC,EAAY,YACZC,EAAQ,QAErB,SAAAC,EAA+BC,EAAmBC,GAChD,YAD6B,IAAAD,IAAAA,EAAA,GACrBC,EAAOC,MACb,KAAKN,EAGH,OAFAV,QAAQC,IAAIa,GAELA,EAAQ,EAEjB,KAAKH,EACH,OAAOG,EAAQ,EAEjB,KAAKF,EACH,OAAO,EAET,QACE,OAAOE,GCpBb,IAAAG,EAAA,gCAmBSA,EAAAC,QAAP,SAAeC,GASb,MAAO,CACLC,SAAUH,EACVI,UAAW,EAVajB,EAWLe,EAVZ,CACLG,QAASnB,EACToB,WAAY,SAACC,GAAyC,OAAA,IAAIrB,EAA2BC,EAAaoB,IAClGC,KAAM,CAAC1B,OAJX,IAA0BK,GAgBrBa,EAAAS,WAAP,SAAkBP,GAShB,MAAO,CACLC,SAAUH,EACVI,UAAW,EAVajB,EAWLe,EAVZ,CACLG,QAASnB,EACToB,WAAY,SAACC,GAAyC,OAAA,IAAIrB,EAA2BC,EAAaoB,IAClGC,KAAM,CAAC1B,OAJX,IAA0BK,GAgBrBa,EAAAU,YAAP,SAAmBR,GASjB,MAAO,CACLC,SAAUH,EACVI,UAAW,EAVajB,EAWLe,EAVZ,CACLG,QAASnB,EACToB,WAAY,SAACC,GAAyC,OAAA,IAAIrB,EAA2BC,EAAaoB,IAClGC,KAAM,CAAC1B,OAJX,IAA0BK,uBA/C7BwB,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAEPC,EAAAA,YAAYb,QAAQ,CAAEc,MAAOnB,KAE/BQ,UAAW,CACTtB,GAGFkC,QAAS,SAhBX,GCAAC,EAAA,WAiBE,SAAAA,EAAoBC,GAAA7B,KAAA6B,MAAAA,EAClB7B,KAAK8B,QAAUD,EAAME,OAAO,kBAG9BH,EAAA3B,UAAA+B,UAAA,WACEhC,KAAK6B,MAAMI,SAAS,CAAEvB,KAAMN,KAG9BwB,EAAA3B,UAAAiC,UAAA,WACElC,KAAK6B,MAAMI,SAAS,CAAEvB,KAAML,KAG9BuB,EAAA3B,UAAAkC,MAAA,WACEnC,KAAK6B,MAAMI,SAAS,CAAEvB,KAAMJ,yBAnB/BV,EAAAA,WAAU2B,KAAA,CAAC,CACVa,WAAYzB,+CATL0B,EAAAA,4HAHT","sourcesContent":["import { Injectable } from '@angular/core';\nimport {ServicesModule} from './services.module';\n\n@Injectable()\nexport class DependentService {\n  constructor() {\n    console.log('DependentService');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {ServicesModule} from './services.module';\nimport {DependentService} from './dependentService.service';\n\n@Injectable()\nexport class ServiceWithConfiguredParam {\n  constructor(private configParam: any, dependentService: DependentService) {\n    console.log(configParam);\n    console.log(dependentService);\n  }\n\n  testProperty = 0;\n\n  testConfiguration() {\n    console.log(this.testProperty);\n    this.testProperty += 1;\n    console.log(this.configParam);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const RESET = 'RESET';\n\nexport function counterReducer(state: number = 0, action: Action) {\n  switch (action.type) {\n    case INCREMENT:\n      console.log(state);\n\n      return state + 1;\n\n    case DECREMENT:\n      return state - 1;\n\n    case RESET:\n      return 0;\n\n    default:\n      return state;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {StoreModule} from '@ngrx/store';\nimport {counterReducer} from './counter';\nimport {ServiceWithConfiguredParam} from './serviceWithConfiguredParam.service';\nimport {DependentService} from './dependentService.service';\n\n@NgModule({\n  imports: [\n    // BrowserModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  providers: [\n    DependentService,\n    // ServiceWithConfiguredParam,\n  ],\n  exports: []\n})\nexport class ServicesModule {\n  static forRoot(param: string): ModuleWithProviders {\n    function provideMyService(configParam: string) {\n      return {\n        provide: ServiceWithConfiguredParam,\n        useFactory: (servicesTwoService: DependentService) => new ServiceWithConfiguredParam(configParam, servicesTwoService),\n        deps: [DependentService]\n      };\n    }\n\n    return {\n      ngModule: ServicesModule,\n      providers: [\n        provideMyService(param)\n      ]\n    };\n  }\n\n  static forFeature(param: string): ModuleWithProviders {\n    function provideMyService(configParam: string) {\n      return {\n        provide: ServiceWithConfiguredParam,\n        useFactory: (servicesTwoService: DependentService) => new ServiceWithConfiguredParam(configParam, servicesTwoService),\n        deps: [DependentService]\n      };\n    }\n\n    return {\n      ngModule: ServicesModule,\n      providers: [\n        provideMyService(param)\n      ]\n    };\n  }\n\n  static forTheHorde(param: string): ModuleWithProviders {\n    function provideMyService(configParam: string) {\n      return {\n        provide: ServiceWithConfiguredParam,\n        useFactory: (servicesTwoService: DependentService) => new ServiceWithConfiguredParam(configParam, servicesTwoService),\n        deps: [DependentService]\n      };\n    }\n\n    return {\n      ngModule: ServicesModule,\n      providers: [\n        provideMyService(param)\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {ServicesModule} from './services.module';\nimport { Store } from '@ngrx/store';\n\nimport { INCREMENT, DECREMENT, RESET } from './counter';\n\nexport interface AppState {\n  count: number;\n}\n\n@Injectable({\n  providedIn: ServicesModule\n})\nexport class StoreService {\n  counter: Observable<number>;\n\n  constructor(private store: Store<AppState>) {\n    this.counter = store.select('counter');\n  }\n\n  increment() {\n    this.store.dispatch({ type: INCREMENT });\n  }\n\n  decrement() {\n    this.store.dispatch({ type: DECREMENT });\n  }\n\n  reset() {\n    this.store.dispatch({ type: RESET });\n  }\n}\n"]}